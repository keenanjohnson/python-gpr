name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
          ~/.local/lib/python*/site-packages
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Configure pip and environment for network resilience
      run: |
        # Set global pip environment variables for all processes
        echo "PIP_TIMEOUT=300" >> $GITHUB_ENV
        echo "PIP_RETRIES=3" >> $GITHUB_ENV
        echo "PIP_DEFAULT_TIMEOUT=300" >> $GITHUB_ENV
        echo "PIP_TIMEOUT=300" >> $GITHUB_OUTPUT
        echo "PIP_RETRIES=3" >> $GITHUB_OUTPUT
        echo "PIP_DEFAULT_TIMEOUT=300" >> $GITHUB_OUTPUT
        
        # Create pip config for better network handling
        mkdir -p ~/.pip
        cat > ~/.pip/pip.conf << 'EOF'
        [global]
        timeout = 300
        retries = 3
        default-timeout = 300
        EOF
        
        # Windows-specific pip config
        if [ "$RUNNER_OS" = "Windows" ]; then
          mkdir -p ~/AppData/Roaming/pip
          cp ~/.pip/pip.conf ~/AppData/Roaming/pip/pip.ini
        fi

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black flake8 mypy numpy
      env:
        PIP_TIMEOUT: 300
        PIP_RETRIES: 3
        PIP_DEFAULT_TIMEOUT: 300

    - name: Lint with black
      run: |
        black --check --diff src/ tests/
      timeout-minutes: 5

    - name: Lint with flake8
      run: |
        flake8 src/ tests/
      timeout-minutes: 5

    - name: Type check with mypy
      run: |
        mypy src/python_gpr/__init__.py src/python_gpr/conversion.py src/python_gpr/core.py src/python_gpr/metadata.py
      timeout-minutes: 10

    - name: Install testing dependencies
      run: |
        python -m pip install pytest pytest-cov toml
      env:
        PIP_TIMEOUT: 300
        PIP_RETRIES: 3
        PIP_DEFAULT_TIMEOUT: 300

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
      timeout-minutes: 15

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
          ~/.local/lib/python*/site-packages
        key: ${{ runner.os }}-pip-build-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-build-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-
          ${{ runner.os }}-pip-build-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-build-

    - name: Configure pip and environment for network resilience
      run: |
        # Set global pip environment variables for all processes including isolated builds
        echo "PIP_TIMEOUT=300" >> $GITHUB_ENV
        echo "PIP_RETRIES=3" >> $GITHUB_ENV
        echo "PIP_DEFAULT_TIMEOUT=300" >> $GITHUB_ENV
        
        # Create pip config for better network handling
        mkdir -p ~/.pip
        cat > ~/.pip/pip.conf << 'EOF'
        [global]
        timeout = 300
        retries = 3
        default-timeout = 300
        EOF
        
        # Windows-specific pip config
        if [ "$RUNNER_OS" = "Windows" ]; then
          mkdir -p ~/AppData/Roaming/pip
          cp ~/.pip/pip.conf ~/AppData/Roaming/pip/pip.ini
        fi

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build wheel scikit-build-core pybind11 setuptools_scm
      env:
        PIP_TIMEOUT: 300
        PIP_RETRIES: 3
        PIP_DEFAULT_TIMEOUT: 300

    - name: Build package
      run: |
        python -m build
      env:
        PIP_TIMEOUT: 300
        PIP_RETRIES: 3
        PIP_DEFAULT_TIMEOUT: 300
      timeout-minutes: 30

    - name: Fallback build (if main build fails)
      if: failure()
      run: |
        echo "Main build failed, trying alternative approach..."
        # Install build dependencies in the main environment
        python -m pip install scikit-build-core[pyproject] pybind11 setuptools_scm
        # Try building without isolation
        python -m build --no-isolation
      env:
        PIP_TIMEOUT: 300
        PIP_RETRIES: 3
        PIP_DEFAULT_TIMEOUT: 300
      timeout-minutes: 20

    - name: Verify build artifacts
      run: |
        ls -la dist/
        # Check that both wheel and source distributions were created
        if [ $(ls dist/*.whl | wc -l) -eq 0 ]; then
          echo "No wheel files found in dist/"
          exit 1
        fi
        if [ $(ls dist/*.tar.gz | wc -l) -eq 0 ]; then
          echo "No source distribution found in dist/"
          exit 1
        fi
        echo "Build artifacts verified successfully"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-gpr-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/
        retention-days: 30

  # Separate job for building wheels using cibuildwheel (optional enhancement)
  build-wheels:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.2
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux*"
        CIBW_BEFORE_ALL_LINUX: >
          yum install -y cmake3 gcc gcc-c++ make &&
          ln -sf /usr/bin/cmake3 /usr/bin/cmake
        CIBW_BEFORE_ALL_MACOS: brew install cmake
        CIBW_BEFORE_ALL_WINDOWS: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        CIBW_BUILD_VERBOSITY: 1
        # Add pip timeout and retry settings
        CIBW_ENVIRONMENT: >
          PIP_TIMEOUT=300
          PIP_RETRIES=3
          PIP_DEFAULT_TIMEOUT=300
        # Global pip settings for cibuildwheel
        PIP_TIMEOUT: 300
        PIP_RETRIES: 3
        PIP_DEFAULT_TIMEOUT: 300

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: wheelhouse/
        retention-days: 30