name: Build Wheels

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate_config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install validation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install toml pyyaml cibuildwheel

      - name: Validate pyproject.toml
        run: |
          python -c "
          import toml
          config = toml.load('pyproject.toml')
          cibw = config.get('tool', {}).get('cibuildwheel', {})
          assert cibw, 'No cibuildwheel config found'
          assert 'build' in cibw, 'No build pattern specified'
          assert 'test-command' in cibw, 'No test command specified'
          print('✅ pyproject.toml validation passed')
          "

      - name: Validate workflow syntax
        run: |
          python -c "
          import yaml
          with open('.github/workflows/wheels.yml') as f:
              yaml.safe_load(f)
          print('✅ Workflow YAML validation passed')
          "

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: validate_config
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # Verbose output for debugging
          CIBW_BUILD_VERBOSITY: 1
          # Skip problematic combinations if needed
          CIBW_SKIP: "*-musllinux*"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    needs: validate_config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  test_wheels:
    name: Test wheels
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.12"]  # Test oldest and newest supported versions

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-${{ matrix.os }}-*
          path: wheelhouse
          merge-multiple: true

      - name: Install wheel and test
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Find and install the wheel for this platform and Python version
          wheel_file=$(find wheelhouse -name "*.whl" | head -1)
          if [ -n "$wheel_file" ]; then
            echo "Installing wheel: $wheel_file"
            pip install "$wheel_file"
            # Test basic import
            python -c "import python_gpr; print('Basic import test passed')"
            # Test version attribute
            python -c "import python_gpr; print('Version:', getattr(python_gpr, '__version__', 'unknown'))"
            # Run basic functionality test without requiring tests directory
            python -c "
            import python_gpr
            # Test that we can create basic objects
            try:
                params = python_gpr.GPRParameters()
                print('GPRParameters creation test passed')
            except Exception as e:
                print(f'GPRParameters test failed: {e}')
            
            # Test that we can access module metadata
            try:
                info = python_gpr.get_gpr_info('/nonexistent/file.gpr')
                print('get_gpr_info callable test passed')
            except (FileNotFoundError, Exception) as e:
                print(f'get_gpr_info test passed (expected error: {type(e).__name__})')
            "
          else
            echo "No wheel found for this platform/Python version"
            exit 1
          fi

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist, test_wheels]
    runs-on: ubuntu-latest
    # Only upload on tags (releases)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/python-gpr
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use trusted publishing (no API key needed)
          # Repository must be configured with PyPI trusted publishing
          skip-existing: true