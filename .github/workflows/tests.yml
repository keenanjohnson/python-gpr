name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Run basic unit tests
      run: |
        python -m unittest tests.test_core_basic -v

    - name: Try to install package with dev dependencies
      continue-on-error: true
      run: |
        pip install -e .[dev]

    - name: Run pytest tests if available
      continue-on-error: true
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Run unittest discovery
      run: |
        python -m unittest discover tests/ -v

    - name: Check code style with black (if available)
      continue-on-error: true
      run: |
        python -m black --check src/ tests/

    - name: Check with flake8 (if available)
      continue-on-error: true
      run: |
        python -m flake8 src/ tests/

    - name: Type check with mypy (if available)
      continue-on-error: true
      run: |
        python -m mypy src/

  # Job to test building (will be important once C++ bindings are added)
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.12"]  # Test with oldest and newest supported versions

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      continue-on-error: true  # Allow failure since C++ bindings may not be ready
      run: |
        python -m build

    - name: Install package locally
      continue-on-error: true
      run: |
        pip install dist/*.whl

    - name: Test basic import after install
      continue-on-error: true
      run: |
        python -c "import python_gpr; print(f'Version: {python_gpr.__version__}')"