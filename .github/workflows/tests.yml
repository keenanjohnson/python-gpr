name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        numpy-version: ["~=1.20.0", "~=1.24.0", "~=2.0.0", "latest"]
        exclude:
          # NumPy 2.0+ requires Python 3.9+, and some combinations may not be available
          - python-version: "3.9"
            numpy-version: "~=2.0.0"
            os: "windows-latest"  # Exclude problematic combinations
          # NumPy 1.20.* has issues with Python 3.12
          - python-version: "3.12"
            numpy-version: "~=1.20.0"
        include:
          # Add specific combinations for thorough testing
          - os: ubuntu-latest
            python-version: "3.12"
            numpy-version: "latest"
            test-type: "comprehensive"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes --no-progress
      timeout-minutes: 10
      shell: bash

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip --timeout 300
        pip install build wheel --timeout 300
      shell: bash

    - name: Install NumPy (latest)
      if: matrix.numpy-version == 'latest'
      run: |
        pip install numpy --timeout 300
      shell: bash

    - name: Install NumPy (specific version)
      if: matrix.numpy-version != 'latest'
      run: |
        pip install "numpy${{ matrix.numpy-version }}" --timeout 300
      shell: bash

    - name: Run basic unit tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -m unittest tests.test_core_basic -v
      shell: bash

    - name: Display environment info
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Python: ${{ matrix.python-version }}"
        echo "NumPy target: ${{ matrix.numpy-version }}"
        python -c "import platform; print(f'Platform: {platform.system()} {platform.release()}')"
        python -c "import sys; print(f'Python version: {sys.version}')"
        python -c "import numpy; print(f'NumPy version: {numpy.__version__}')" || echo "NumPy not available"
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "import python_gpr; print(f'python_gpr version: {python_gpr.__version__}')" || echo "python_gpr import failed"
      shell: bash

    - name: Initialize submodules
      run: |
        git submodule update --init --recursive

    - name: Try to install package with dev dependencies
      id: install_dev
      continue-on-error: true
      run: |
        # Try to install in development mode, fallback to just dev dependencies
        pip install -e .[dev] --timeout 300 || pip install pytest pytest-cov black flake8 mypy --timeout 300
      shell: bash

    - name: Install memory profiling dependencies (fallback)
      continue-on-error: true
      shell: bash
      run: |
        pip install memory-profiler psutil || echo "Memory profiling dependencies installation failed"

    - name: Check installation status
      shell: bash
      run: |
        if [ "${{ steps.install_dev.outcome }}" == "success" ]; then
          echo "✅ Package installed successfully with dev dependencies"
        else
          echo "⚠️ Package installation failed - tests will run in fallback mode"
          echo "This is expected if C++ build dependencies are not available"
        fi

    - name: Run pytest tests if available
      continue-on-error: true
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -m pytest tests/ -v --tb=short
      shell: bash

    - name: Run memory leak detection tests
      continue-on-error: true
      run: |
        echo "Running memory leak detection tests..."
        echo "Note: Tests will be skipped if package installation failed"
        python -m pytest tests/test_memory_leaks.py -v -m "not slow" --tb=short

    - name: Run automated memory leak detection script
      continue-on-error: true
      run: |
        echo "Running automated memory leak detection script..."
        echo "Note: Script will exit with error if package installation failed"
        python scripts/check_memory_leaks.py --quick

    - name: Run long-running memory tests (limited)
      continue-on-error: true
      run: |
        echo "Running limited long-running memory tests..."
        echo "Note: Tests will be skipped if package installation failed"
        python -m pytest tests/test_memory_long_running.py::TestMemoryGrowthPatterns -v --tb=short

    - name: Run unittest discovery
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -m unittest discover tests/ -v
      shell: bash

    - name: Run platform-specific tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -m unittest tests.test_platform_compatibility -v
      shell: bash

    - name: Run comprehensive tests (if specified)
      if: matrix.test-type == 'comprehensive'
      run: |
        echo "Running comprehensive test suite..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -m unittest tests.test_numpy_integration -v
        python -m unittest tests.test_requirements_validation -v
      shell: bash

    - name: Check code style with black (if available)
      continue-on-error: true
      run: |
        python -m black --check src/ tests/
      shell: bash

    - name: Check with flake8 (if available)
      continue-on-error: true
      run: |
        python -m flake8 src/ tests/
      shell: bash

    - name: Type check with mypy (if available)
      continue-on-error: true
      run: |
        python -m mypy src/
      shell: bash

  # Job to test building (will be important once C++ bindings are added)
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.12"]  # Test with oldest and newest supported versions

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --yes --no-progress
      timeout-minutes: 10
      shell: bash

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip --timeout 300
        pip install build wheel --timeout 300
      shell: bash

    - name: Build package
      continue-on-error: true  # Allow failure since C++ bindings may not be ready
      run: |
        python -m build
      shell: bash

    - name: Install package locally
      continue-on-error: true
      run: |
        pip install dist/*.whl
      shell: bash

    - name: Test basic import after install
      continue-on-error: true
      run: |
        python -c "import python_gpr; print(f'Version: {python_gpr.__version__}')"
      shell: bash