"""
Tests for project metadata and configuration.

This test validates that the pyproject.toml follows PEP 518/621 standards
and that all required metadata is properly defined.
"""

import unittest
from pathlib import Path

# Try to import pytest, fall back to unittest if not available
try:
    import pytest
    HAS_PYTEST = True
except ImportError:
    HAS_PYTEST = False

# Try to import toml, fall back to tomllib (Python 3.11+) or skip if unavailable
try:
    import toml
    HAS_TOML = True
except ImportError:
    try:
        import tomllib as toml
        HAS_TOML = True
    except ImportError:
        HAS_TOML = False


@unittest.skipIf(not HAS_TOML, "toml library not available")
class TestPyprojectTOML(unittest.TestCase):
    """Test pyproject.toml file and metadata."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
        
    def test_pyproject_toml_exists(self):
        """Test that pyproject.toml exists in project root."""
        self.assertTrue(self.pyproject_path.exists(), "pyproject.toml not found")

    def test_pyproject_toml_valid(self):
        """Test that pyproject.toml is valid TOML."""
        try:
            if hasattr(toml, 'load'):
                data = toml.load(self.pyproject_path)
            else:
                # tomllib (Python 3.11+) uses load with 'rb' mode
                with open(self.pyproject_path, 'rb') as f:
                    data = toml.load(f)
            self.assertIsInstance(data, dict, "pyproject.toml should parse to a dictionary")
        except Exception as e:
            self.fail(f"pyproject.toml is not valid TOML: {e}")

    def test_pep518_build_system(self):
        """Test PEP 518 build system compliance."""
        if hasattr(toml, 'load'):
            data = toml.load(self.pyproject_path)
        else:
            with open(self.pyproject_path, 'rb') as f:
                data = toml.load(f)
        
        self.assertIn("build-system", data, "build-system section missing")
        build_system = data["build-system"]
        
        self.assertIn("requires", build_system, "build-system.requires missing")
        self.assertIn("build-backend", build_system, "build-system.build-backend missing")
        
        self.assertIsInstance(build_system["requires"], list, "build-system.requires should be a list")
        self.assertGreater(len(build_system["requires"]), 0, "build-system.requires should not be empty")
        
        self.assertEqual(build_system["build-backend"], "scikit_build_core.build", "Expected scikit-build-core backend")


    def test_pep621_project_metadata(self):
        """Test PEP 621 project metadata compliance."""
        if hasattr(toml, 'load'):
            data = toml.load(self.pyproject_path)
        else:
            with open(self.pyproject_path, 'rb') as f:
                data = toml.load(f)
        
        self.assertIn("project", data, "project section missing")
        project = data["project"]
        
        # Required fields
        required_fields = ["name", "description", "requires-python"]
        for field in required_fields:
            self.assertIn(field, project, f"project.{field} is required")
            self.assertTrue(project[field], f"project.{field} should not be empty")
        
        # Version handling (either static or dynamic)
        version_specified = ("version" in project) or ("dynamic" in project and "version" in project["dynamic"])
        self.assertTrue(version_specified, "project.version must be specified either statically or dynamically")
        
        # Authors
        self.assertIn("authors", project, "project.authors is required")
        self.assertIsInstance(project["authors"], list, "project.authors should be a list")
        self.assertGreater(len(project["authors"]), 0, "project.authors should not be empty")
        
        for author in project["authors"]:
            self.assertIn("name", author, "Each author should have a name")
            self.assertTrue(author["name"], "Author name should not be empty")


def test_project_name():
    """Test project name is correct."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    assert data["project"]["name"] == "python-gpr", "Project name should be 'python-gpr'"


def test_dependencies():
    """Test that dependencies are properly specified."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    project = data["project"]
    
    # Main dependencies
    assert "dependencies" in project, "project.dependencies should be specified"
    assert isinstance(project["dependencies"], list), "project.dependencies should be a list"
    
    # Should have numpy as a dependency
    numpy_deps = [dep for dep in project["dependencies"] if dep.startswith("numpy")]
    assert len(numpy_deps) > 0, "numpy should be a dependency"


def test_optional_dependencies():
    """Test optional dependencies configuration."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    project = data["project"]
    
    assert "optional-dependencies" in project, "optional-dependencies should be specified"
    optional_deps = project["optional-dependencies"]
    
    # Should have dev dependencies
    assert "dev" in optional_deps, "dev optional dependencies should be specified"
    dev_deps = optional_deps["dev"]
    assert isinstance(dev_deps, list), "dev dependencies should be a list"
    assert len(dev_deps) > 0, "dev dependencies should not be empty"
    
    # Check for common dev tools
    dev_tools = ["pytest", "black", "flake8", "mypy"]
    for tool in dev_tools:
        tool_found = any(dep.startswith(tool) for dep in dev_deps)
        assert tool_found, f"{tool} should be in dev dependencies"


def test_scikit_build_configuration():
    """Test scikit-build configuration."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    assert "tool" in data, "tool section missing"
    assert "scikit-build" in data["tool"], "tool.scikit-build section missing"
    
    skb = data["tool"]["scikit-build"]
    
    assert "minimum-version" in skb, "scikit-build minimum-version should be specified"
    
    # Check cmake configuration if present
    if "cmake" in skb:
        cmake = skb["cmake"]
        if "args" in cmake:
            assert isinstance(cmake["args"], list), "cmake.args should be a list"


def test_python_version_requirement():
    """Test Python version requirement."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    requires_python = data["project"]["requires-python"]
    assert "3.8" in requires_python, "Should support Python 3.8+"


def test_project_urls():
    """Test project URLs are specified."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    project = data["project"]
    
    if "urls" in project:
        urls = project["urls"]
        # Check for common URLs
        expected_urls = ["Homepage", "Repository", "Issues"]
        for url_type in expected_urls:
            if url_type in urls:
                assert urls[url_type], f"{url_type} URL should not be empty"
                assert urls[url_type].startswith("http"), f"{url_type} URL should be a valid URL"


def test_classifiers():
    """Test project classifiers."""
    pyproject_path = Path(__file__).parent.parent / "pyproject.toml"
    data = toml.load(pyproject_path)
    
    project = data["project"]
    
    if "classifiers" in project:
        classifiers = project["classifiers"]
        assert isinstance(classifiers, list), "classifiers should be a list"
        
        # Should have development status
        dev_status_found = any("Development Status" in c for c in classifiers)
        assert dev_status_found, "Should have Development Status classifier"
        
        # Should have license classifier
        license_found = any("License ::" in c for c in classifiers)
        assert license_found, "Should have License classifier"
        
        # Should have Python version classifiers
        python_found = any("Programming Language :: Python ::" in c for c in classifiers)
        assert python_found, "Should have Python version classifiers"